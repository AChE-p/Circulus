<UserControl x:Class="Circulus.FunctionedTextBox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Circulus"
             mc:Ignorable="d" 
             d:DesignHeight="30" Width="200">
    <UserControl.Resources>
        <LinearGradientBrush x:Key="TextSelectionBrush" StartPoint="0,0" EndPoint="1,0">
            <GradientStop Color="#C3C7C7" Offset="0"/>
            <GradientStop Color="#BDDCDB" Offset="0.5"/>
            <GradientStop Color="#C3C7C7" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="FocusBorderBrush" StartPoint="0,0" EndPoint="1,0">
            <GradientStop Color="#A6A7B3" Offset="0"/>
            <GradientStop Color="#C7C9D7" Offset="0"/>
            <GradientStop Color="#A6A7B3" Offset="0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ControlBorderBrush" Color="#D6D7E3"/>
        <Style x:Key="FIcon" TargetType="TextBlock">
            <Setter Property="Background" Value="Transparent"/>
        </Style>
        <Style x:Key="DefaultGudgetButton" TargetType="{x:Type local:GudgetButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate x:Name="Button_Template" TargetType="{x:Type local:GudgetButton}">
                        <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}">
                            <!--Icon/Text-->
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" 
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                <TextBlock x:Name="icon"  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{StaticResource FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}" 
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}">
                                    <TextBlock.RenderTransform>
                                        <RotateTransform x:Name="transIcon" Angle="0"/>
                                    </TextBlock.RenderTransform>
                                </TextBlock>

                                <TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"></TextBlock>
                            </StackPanel>
                        </Border>
                        <!--触发器-->
                        <ControlTemplate.Triggers>
                            <!--设置鼠标进入时的背景、前景样式-->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />
                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>
                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="txt"/>
                            </Trigger>
                            <!--Ficon的动画触发器-->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="true"></Condition>
                                    <Condition Property="AllowsAnimation" Value="true"></Condition>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <!--鼠标按下时的前景、背景样式-->
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.5" TargetName="border"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TransparentButton" TargetType="{x:Type local:GudgetButton}" BasedOn="{StaticResource DefaultGudgetButton}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="MouseOverBackground" Value="Transparent" />
            <Setter Property="PressedBackground" Value="Transparent" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="MouseOverForeground" Value="#242424" />
            <Setter Property="PressedForeground" Value="#242424" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Width" Value="Auto" />
            <Setter Property="CornerRadius" Value="0" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="FIconSize" Value="20" />
            <Setter Property="Padding" Value="3,1,3,1" />
            <Setter Property="Content" Value="" />
            <Setter Property="FIconMargin" Value="0,0,2,0" />
            <Setter Property="AllowsAnimation" Value="False" />
            <Setter Property="Cursor" Value="Hand" />
        </Style>
        <Style TargetType="{x:Type TextBox}" x:Key="DefaultTextBox">
            <Setter Property="ContextMenu" Value="{DynamicResource TextBoxContextMenu}" />
            <Setter Property="SelectionBrush" Value="{StaticResource TextSelectionBrush}" />
            <Setter Property="SelectionOpacity" Value="0.5"/>
            <Setter Property="FontFamily" Value="Noto Sans CJK Regular" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="BorderThickness" Value="1.4" />
            <Setter Property="MinHeight" Value="20" />
            <Setter Property="Width" Value="200" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#242424" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}" />
            <Setter Property="local:ControlAttachProperty.FocusBorderBrush" Value="{StaticResource FocusBorderBrush}" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="CaretBrush" Value="#242424" />
            <Setter Property="local:ControlAttachProperty.CornerRadius" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid x:Name="PART_Root">
                            <Border x:Name="Bg" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding local:ControlAttachProperty.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
                            <Grid x:Name="PART_InnerGrid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition  Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition  Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <!--Label区域-->
                                <ContentControl x:Name="Label" Margin="1" Template="{TemplateBinding local:ControlAttachProperty.LabelTemplate}"
                                            Content="{TemplateBinding local:ControlAttachProperty.Label}"/>
                                <!--内容区域-->
                                <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" Grid.Column="1" IsTabStop="False" Margin="2"
                                          VerticalAlignment="Stretch" Background="{x:Null}" />
                                <!--水印-->
                                <TextBlock x:Name="Message"  Padding="{TemplateBinding Padding}" Visibility="Collapsed"
                                       Text="{TemplateBinding local:ControlAttachProperty.Watermark}" Grid.Column="1"
                                       Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" Opacity="0.4"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="5,2,5,2" />
                                <!--附加内容区域-->
                                <Border x:Name="PART_AttachContent" Grid.Column="2" Margin="2" VerticalAlignment="Center" HorizontalAlignment="Center" >
                                    <ContentControl VerticalAlignment="Center" VerticalContentAlignment="Center" Template="{TemplateBinding local:ControlAttachProperty.AttachContent}" />
                                </Border>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--显示水印-->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
                            </DataTrigger>

                            <Trigger Property="IsFocused" Value="True">
                                <Setter  Property="BorderBrush" Value="{Binding Path=(local:ControlAttachProperty.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="PART_Root" Property="Opacity" Value="0.4" />
                                <Setter Property="BorderThickness" Value="0.6"/>
                            </Trigger>
                            <Trigger Property="IsReadOnly" Value="True">
                                <Setter TargetName="PART_AttachContent" Property="IsEnabled" Value="False" />
                                <Setter TargetName="Bg" Property="Opacity" Value="0.75" />
                                <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.75" />
                                <!--<Setter TargetName="Label" Property="Opacity" Value="" />-->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TextBox}" x:Key="ClearButtonTextBox" BasedOn="{StaticResource DefaultTextBox}">
            <Setter Property="local:ControlAttachProperty.AttachContent">
                <Setter.Value>
                    <ControlTemplate>
                        <local:GudgetButton FIcon="&#xf05c;" FontFamily="FontAwesome" Style="{StaticResource TransparentButton}" IsTabStop="False" FIconMargin="0"
                                   local:ControlAttachProperty.IsClearTextButtonBehaviorEnabled="True" Command="local:ControlAttachProperty.ClearTextCommand" 
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TextBox}}}"
                               Margin="1,3,1,4" FIconSize="18" Foreground="DarkGray" Cursor="Arrow"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <TextBox x:Name="TextB" Style="{DynamicResource ClearButtonTextBox}" Width="200"/>
    </Grid>
</UserControl>
